<style lang="less" scoped>
  .box{
    width: 90%;
    margin: 50rpx auto 0 auto;

  }
  .goodsId{
    width: 100%;
    margin-bottom: 10rpx;
    height: 80rpx;
    font-size: 28rpx;
    text-align: center;
    line-height: 80rpx;
    border-bottom: 1rpx solid rgb(202, 202, 202);
  }
  .form{
    width: 100%;
    margin-bottom: 40rpx;
    .row{
      width: 100%;
      height: 80rpx;
      margin-bottom: 10rpx;
      border-bottom: 1rpx solid rgb(202, 202, 202);
      background-color: rgb(247, 247, 247);
    }
  }
  .title{
    display: block;
    float: left;
    height: 100%;
    width: 270rpx;
    font-size: 32rpx;
    font-weight: 400;
    line-height: 80rpx;
    color: rgb(104, 104, 104);
    padding-left: 30rpx;
  }
  .input{
    box-sizing: border-box;
    width: 375rpx;
    height: 100%;
    color: #4395ff;
    font-weight: 700;
    font-size: 32rpx;
    line-height: 80rpx;
    float: left;
    text-align: center;
    border-left: 1rpx solid rgb(202, 202, 202);
    border-right: 1rpx solid rgb(202, 202, 202);
    border-radius: 10rpx;
    input{
      width: 100%;
      height: 100%;
    }
    .disabled{
      background-color: rgb(204, 204, 204);
    }
  }
  .type>.active{
    background-color: #4395ff;
    color: #fff;
  }
  .type>button{
    width: 170rpx;
    height: 80%;
    margin-right: 10rpx;
    vertical-align: middle;
    border-radius: 5rpx;
    color: rgb(104, 104, 104);
  }
  .time{
    display: flex;
    justify-content: space-around;
    align-items: center;
    text{
      display: block;
      width: 100rpx;
      height: 60rpx;
      color: #4395ff;
      font-weight: 700;
      font-size: 32rpx;
      line-height: 60rpx;
      text-align: center;
    }
    button{
      width: 60rpx;
      height: 60rpx;
      padding: 0;
      border: 0;
    }
  }
  .time image{
    width: 100%;
    height: 100%;
  }
  .backAndsubmit{
    width: 100%;
    height: 80rpx;
    display: flex;
    justify-content: space-around;
    button{
      width: 300rpx;
      height: 80rpx;
      border: 1rpx solid #4395ff;
      border-radius: 10rpx;
    }
    navigator{
      width: 100%;
      height: 100%;
    }
  }
</style>

<template>
  <view>
    <navigatorBack :message.sync="page"></navigatorBack>
    <view class="container box">
      <view class="goodsId">{{returnData.id}}</view>
      <view class="form">
        <view class="row">
          <text class="title">{{m.price}}</text>
          <view class="input">
            <input type="text" class="disabled" value="{{returnData.price}}" disabled/>
          </view>
        </view>
        <view class="row">
          <text class="title">{{m.type}}</text>
          <view class="input type">
            <input type="text" class="disabled" value="{{returnData.type}}" disabled/>
          </view>
        </view>
        <view class="row">
          <text class="title">{{m.outTime}}</text>
          <view class="input">
            <input type="text" class="disabled" value="{{returnData.outTime}}" disabled/>
          </view>
        </view>
        <view class="row">
          <text class="title">{{m.returnTime}}</text>
          <view class="input">
            <input type="text" class="disabled" value="{{returnData.returnTime}}" disabled/>
          </view>
        </view>
        <view class="row">
          <text class="title">{{m.length}}</text>
          <view class="input">
            <input type="text" class="disabled" value="{{computedRenttime}}" disabled/>
          </view>
        </view>
        <view class="row">
          <text class="title">{{m.totalPrice}}</text>
          <view class="input">
            <input type="text" class="disabled" value="{{computedTotalprice}}" disabled/>
          </view>
        </view>
        <view class="row">
          <text class="title">{{m.actualCollection}}</text>
          <view class="input">
            <input id="actualCollection" bindconfirm="binddata" type="text" placeholder="{{m.placeholder}}"/>
          </view>
        </view>
        <view class="row">
          <text class="title">{{m.change}}</text>
          <view class="input">
            <input type="text" class="disabled" value="{{computedChange}}" disabled/>
          </view>
        </view>
      </view>
      <view class="backAndsubmit">
        <button hover-class="button-hover" @tap="navToHome">{{m.back}}</button>
        <button @tap="onSubmit" hover-class="button-hover">{{m.submit}}</button>
      </view>
    </view>
    <tabBar :list.sync="m" father="return"></tabBar>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '../api/api.js'
  import tip from '../utils/tip.js'
  import { getLang } from '../lang/index.js'
  import TabBar from '../components/tab-bar'
  import NavigatorBack from '../components/navigator-back'

  export default class Return extends wepy.page {
    components = {
      tabBar: TabBar,
      navigatorBack: NavigatorBack
    }

    data = {
      // 语种
      language: '',
      // 静态文字
      m: {},
      // 传给tabBar组件，让其知道谁是其父组件
      page: '',
      actualCollection: '',
      returnData: {
        state: 'idle',
        id: '1768S180623_0101900001',
        price: '300',
        type: 'Hour',
        outTime: '20180705 PM 04:00',
        returnTime: '20180705 PM 07:00',
        length: '',
        totalPrice: ''
      },
      typeBtnClass: ['active', '']
    }

    watch = {
      m(newValue, oldValue) {
        if(newValue.page){
          this.page = newValue.page
        }
        // 未出租则重定向回home页
        if(newValue.state === 'idle未出租'){
          this.redirect()
        }
      }
    }

    computed = {
      // 根据returnData.outTime跟时间戳计算出租时长
      computedRenttime(){
        // let date = new Date()
        // this.returnData.returnTime = date
        // if (this.returnData.type === 'Hour'){
        //   let l = Math.round((date - this.returnData.outTime)/3600000)
        //   this.returnData.length = l
        //   return l
        // } else {
        //   let l =Math.round(((date - this.returnData.outTime)/3600000)/24)
        //   this.returnData.length = l
        //   return l
        // }
        return 3
      },

      // 根据returnData.price与length计算总价
      computedTotalprice(){
        // let total = this.returnData.price * this.returnData.length
        // this.returnData.totalPrice = total
        // return total
        return 900
      },

      // 找零金额
      computedChange() {
        // return this.returnData.actualCollection - this.returnData.totalPrice
        return 100
      }
    }

    methods = {
      navToHome(){
        wx.navigateTo({url:'home'})
      },

      // input value绑定returnData处理函数
      binddata(e) {
        let value = e.detail.value
        switch (e.target.id) {
          case 'actualCollection':
            this.actualCollection = value
            break
        }
      },

      // 重定向回home页，并弹窗提示
      redirect() {
        wepy.redirectTo({
          url: 'home',
          success() {
            tip.alert('Not Rented!')
          }
        })
      },

      // 提交
      onSubmit(){
        console.log(this.returnData)
      }      
    }

    async onLoad() {
      await getLang('return', this)
    }
  }
</script>

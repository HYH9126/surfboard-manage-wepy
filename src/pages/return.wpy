<style lang="less" scoped>
  .box{
    width: 90%;
    margin: 50rpx auto 0 auto;

  }
  .backAndsubmit{
    width: 100%;
    height: 80rpx;
    display: flex;
    justify-content: space-around;
    button{
      width: 300rpx;
      height: 80rpx;
      border: 1rpx solid #4395ff;
      border-radius: 10rpx;
    }
    navigator{
      width: 100%;
      height: 100%;
    }
  }
</style>

<template>
  <view>
    <navigatorBack :message.sync="page"></navigatorBack>
    <view class="container box">
      <formlist :list.sync="formData" :goodsId.sync="goodsId"></formlist>
      <view class="backAndsubmit">
        <button hover-class="button-hover" @tap="navToHome">{{m.back}}</button>
        <button @tap="onSubmit" hover-class="button-hover">{{m.submit}}</button>
      </view>
    </view>
    <tabBar :list.sync="m" father="return"></tabBar>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '../api/api.js'
  import tip from '../utils/tip.js'
  import { getLang } from '../lang/index.js'
  import Formlist from '../components/formlist'
  import TabBar from '../components/tab-bar'
  import NavigatorBack from '../components/navigator-back'

  export default class Return extends wepy.page {
    components = {
      formlist: Formlist,
      tabBar: TabBar,
      navigatorBack: NavigatorBack
    }

    data = {
      // 语种
      language: '',
      // 静态文字
      m: {},
      // 传给tabBar组件，让其知道谁是其父组件
      page: '',
      // state/id/price/type/outTime这几个是需要后台给的。actualCollection由用户填写。returnTime为时间戳
      returnData: {
        state: 'idle',
        id: '1768S180623_0101900001',
        price: '300',
        type: 'Hour',
        outTime: '20180705 PM 04:00',
        returnTime: '20180705 PM 07:00',
        length: '3',
        totalPrice: '900',
        actualCollection: '',
        change: ''
      }
    }

    watch = {
      m(newValue, oldValue) {
        if(newValue.page){
          this.page = newValue.page
        }
        // 未出租则重定向回home页
        if(newValue.state === 'idle未出租'){
          this.redirect()
        }
      },
      // 这个watch函数的启动源自returnData.outTime的值从''变为有值，但是现在outTime是直接写死的，所以无法触发watch，就暂时都给注释了
      returnData(newValue, oldValue) {
        
        // 根据returnData.outTime跟时间戳计算length
        // if (newValue.outTime &&newValue.outTime !== oldValue.outTime){
          // let date = new Date()
          // this.returnData.returnTime = date
          // if (newValue.type === 'Hour'){
          //   let l = Math.round((date - newValue.outTime)/3600000)
          //   this.returnData.length = l
          // } else {
          //   let l =Math.round(((date - newValue.outTime)/3600000)/24)
          //   this.returnData.length = l
          // }
          // this.$apply()
        // }

        // 根据returnData.price与length计算总价
        // if (newValue.length && newValue.length !== oldValue.length){
        //   let total = newValue.price * newValue.length
        //   this.returnData.totalPrice = total
            //  this.$apply()
        // }

        // 根据actualCollection与totalPrice计算找零金额
        if (newValue.actualCollection && newValue.actualCollection !== oldValue.actualCollection){
          this.returnData.change = newValue.actualCollection - newValue.totalPrice
          // 在此发现一个问题，计算属性会先于this.returnData.change值修改执行，加this.$apply()后解决
          this.$apply()
        }
      }
    }

    computed = {
      // 监听returnData、m变化，并格式化为Formlist组件所需数据
      goodsId() {
        return this.returnData.id
      },
      formData() {
        // 总价未计算出时不执行,因为总价是最后计算出来的，在总价出来之前数据铁定不全
        if(!this.returnData.totalPrice) return
        // formlist组件所需数据的id是写死的
        let data = [
          {id: 'price'}, 
          {id: 'type'}, 
          {id: 'outTime'}, 
          {id: 'returnTime'}, 
          {id: 'length'}, 
          {id: 'totalPrice'}, 
          {id: 'actualCollection'}, 
          {id: 'change'}
        ]

        data.forEach(ele => {
          // 添加value
          ele.value = this.returnData[ele.id]
          // 添加text
          ele.text = this.m[ele.id]
          // 添加type
          ele.type = 'input'
          // 添加disabled,palceholder
          if (ele.id === 'actualCollection'){
            ele.disabled = false
            ele.placeholder = this.m.placeholder
          } else {
            ele.disabled = true
          }
        })
        return data
      }
    }

    methods = {
      navToHome(){
        wx.navigateTo({url:'home'})
      },

      // 重定向回home页，并弹窗提示
      redirect() {
        wepy.redirectTo({
          url: 'home',
          success() {
            tip.alert('Not Rented!')
          }
        })
      },

      // 提交
      onSubmit(){
        console.log(this.returnData)
      }      
    }

    // 监听子组件Formlist的事件广播
    events = {
      // 更新输入框的value到returnData
      'inputValueChange': (id, value) => {
        if(this.returnData[id] === value) return
        switch (id) {
          case 'actualCollection':
            this.returnData.actualCollection = value
            break
        }
      }
    }

    async onLoad() {
      await getLang('return', this)
    }
  }
</script>
